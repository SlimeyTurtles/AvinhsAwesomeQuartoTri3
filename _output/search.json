[
  {
    "objectID": "BinaryAdditionEC.html",
    "href": "BinaryAdditionEC.html",
    "title": "Binary Addition Extra Credit",
    "section": "",
    "text": "class BinaryAddition {\n\n    public void IntWrapperMethod(Integer a_binary, Integer b_binary) {\n\n        System.out.println(\"Binary Conversion\");\n        System.out.println();\n        System.out.println(\"Binary A: \" + a_binary);\n        System.out.println(\"Binary B: \" + b_binary);\n\n        int a_decimal = Integer.parseInt(a_binary.toString(), 2);\n        int b_decimal = Integer.parseInt(b_binary.toString(), 2);\n        \n        int sum_decimal = a_decimal + b_decimal;\n        \n        String sum_binary = Integer.toBinaryString(sum_decimal);\n        \n        System.out.println(\"Binary Sum: \" + sum_binary);\n\n    }\n\n    public static void main(String[] args) {\n        \n        BinaryAddition bin = new BinaryAddition();\n\n        Integer a = 101010;\n        Integer b = 100100;\n        bin.IntWrapperMethod(a, b);\n\n    }\n\n}\n\nBinaryAddition.main(null);\n\nBinary Conversion\n\n\n\n\n\nBinary A: 101010\n\n\nBinary B: 100100\n\n\nBinary Sum: 1001110"
  },
  {
    "objectID": "DataTypes.html",
    "href": "DataTypes.html",
    "title": "Data Types",
    "section": "",
    "text": "int\n\nclass IntClass {\n\n    public void intPrimitive() {\n        int a = 12;\n        int b = 13;\n        System.out.println(\"Primitive Int\");\n        System.out.println(a+b);\n        System.out.println();\n    }\n\n    public void intWrapper() {\n        Integer a = 12;\n        Integer b = 13;\n        System.out.println(\"Wrapper Int\");\n        System.out.println(a.toString() + b.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        \n        IntClass gnomes = new IntClass();\n\n        gnomes.intPrimitive();\n        gnomes.intWrapper();\n    }\n\n}\n\nIntClass.main(null);\n\nPrimitive Int\n\n\n25\n\n\n\n\n\nWrapper Int\n\n\n1213\n\n\n\n\n\ndouble\n\nclass DoubleClass {\n\n    public void doublePrimitive() {\n        \n        double a = 20.123;\n        double b = 12.194;\n\n        System.out.println(\"Primitive Double\");\n        System.out.println(a+b);\n        System.out.println();\n    }\n\n    public void doubleWrapper() {\n        \n        Double a = 20.123;\n        Double b = 12.194;\n\n        System.out.println(\"Wrapper Double\");\n        System.out.println(a.toString() + b.toString());\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        \n        DoubleClass gnomes = new DoubleClass();\n\n        gnomes.doublePrimitive();\n        gnomes.doubleWrapper();\n    }\n\n}\n\nDoubleClass.main(null);\n\nPrimitive Double\n\n\n32.317\n\n\n\n\n\nWrapper Double\n\n\n20.12312.194\n\n\n\n\n\nboolean\n\nclass BooleanClass {\n\n    public void booleanPrimitive() {\n        \n        boolean a = false;\n        boolean b = true;\n\n        System.out.println(\"Primitive Boolean\");\n        System.out.println(\"a: \" + a);\n        System.out.println(\"b: \" + b);\n        System.out.println(\"a&&b: \" + (a&&b));\n    }\n\n    public void booleanWrapper() {\n        \n        Boolean a = false;\n        Boolean b = true;\n\n        System.out.println(\"Wrapper Double\");\n        System.out.println(\"a: \" + a);\n        System.out.println(\"b: \" + b);\n        System.out.println(\"a compared to b: \" + a.compareTo(b));\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        \n        BooleanClass tomes = new BooleanClass();\n\n        tomes.booleanPrimitive();\n        tomes.booleanWrapper();\n    }\n\n}\n\nBooleanClass.main(null);\n\nPrimitive Boolean\n\n\na: false\n\n\nb: true\n\n\na&&b: false\n\n\nWrapper Double\n\n\na: false\n\n\nb: true\n\n\na compared to b: -1\n\n\n\n\n\nchar\n\nclass CharClass {\n\n    public void charPrimitive() {\n        \n        char a = 'a';\n        char b = '1';\n\n        System.out.println(\"Primitive Char\");\n        System.out.println(a+b);\n        System.out.println();\n    }\n\n    public void charWrapper() {\n        \n        Character a = 'a';\n        Character b = '1';\n\n        System.out.println(\"Char Boolean\");\n        System.out.println(\"a: \" + a);\n        System.out.println(\"Is a letter: \" + Character.isLetter(a));\n        System.out.println(\"Is a number: \" + Character.isDigit(a));\n        System.out.println(\"b: \" + b);\n        System.out.println(\"Is a letter: \" + Character.isLetter(b));\n        System.out.println(\"Is a number: \" + Character.isDigit(b));\n    }\n\n    public static void main(String[] args) {\n        \n        CharClass romes = new CharClass();\n\n        romes.charPrimitive();\n        romes.charWrapper();\n    }\n\n}\n\nCharClass.main(null);\n\nPrimitive Char\n\n\n146\n\n\n\n\n\nChar Boolean\n\n\na: a\n\n\nIs a letter: true\n\n\nIs a number: false\n\n\nb: 1\n\n\nIs a letter: false\n\n\nIs a number: true"
  },
  {
    "objectID": "AvinhsAwesomeQuartoTri3.html",
    "href": "AvinhsAwesomeQuartoTri3.html",
    "title": "AvinhsAwesomeQuartoTri3",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "GenericsTypesAndCollections.html",
    "href": "GenericsTypesAndCollections.html",
    "title": "Generics Types and Collections",
    "section": "",
    "text": "Challenge 1\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class QueueCode {\n\n    public static void ChallengeOne() {\n\n        Queue<String> q = new LinkedList<>();\n        String[] array = {\"seven\", \"slimy\", \"snakes\", \"sallying\", \"slowly\", \"slithered\", \"southward\"};\n\n        System.out.println(\"Challenge One\");\n        System.out.println();\n\n        for (String sword : array) {\n            q.add(sword);\n            System.out.println(q);\n        }\n\n        for (String sword : array) {\n            q.remove();\n            System.out.println(q);\n        }\n\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n\n        ChallengeOne();\n        \n    }\n}\n\nQueueCode.main(null);\n\nChallenge One\n\n\n\n\n\n[seven]\n\n\n[seven, slimy]\n\n\n[seven, slimy, snakes]\n\n\n[seven, slimy, snakes, sallying]\n\n\n[seven, slimy, snakes, sallying, slowly]\n\n\n[seven, slimy, snakes, sallying, slowly, slithered]\n\n\n[seven, slimy, snakes, sallying, slowly, slithered, southward]\n\n\n[slimy, snakes, sallying, slowly, slithered, southward]\n\n\n[snakes, sallying, slowly, slithered, southward]\n\n\n[sallying, slowly, slithered, southward]\n\n\n[slowly, slithered, southward]\n\n\n[slithered, southward]\n\n\n[southward]\n\n\n[]\n\n\n\n\n\n\n\nChallenge 2\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class QueueCode {\n\n    public static void ChallengeTwo() {\n\n        // Declares Queue One\n        Queue<Integer> q1 = new LinkedList<>();\n        Integer[] array1 = {1, 4, 5, 8};\n\n        for (Integer i : array1) {\n            q1.add(i);\n        }\n        \n        // Declares Queue Two\n        Queue<Integer> q2 = new LinkedList<>();\n        Integer[] array2 = {2, 3, 6, 7};\n\n        for (Integer i : array2) {\n            q2.add(i);\n        }\n\n        // Declares Summative Queue\n        Queue<Integer> qSum = new LinkedList<>();\n\n        // Boilerplate prints\n        System.out.println(\"Challenge Two\");\n        System.out.println();\n        System.out.println(\"Queue One: \" + q1);\n        System.out.println(\"Queue Two: \" + q2);\n\n        while (q1.size() > 0 && q2.size() > 0) {\n\n            int q1comparee = q1.peek();\n            int q2comparee = q2.peek();\n\n            if (q1comparee > q2comparee) {\n                qSum.add(q2comparee);\n                q2.remove();\n            } else {\n                qSum.add(q1comparee);\n                q1.remove();\n            }\n        }\n\n        if (q1.size() == 0) {\n            for (int i = 0; i < q2.size(); i++) {\n                qSum.add(q2.peek());\n                q2.remove();\n            }\n        } else if (q2.size() == 0) {\n            for (int i = 0; i < q1.size(); i++) {\n                qSum.add(q1.peek());\n                q1.remove();\n            }\n        }\n\n        System.out.println(\"Summative Queue: \" + qSum);\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n\n        ChallengeTwo();\n\n    }\n}\n\nQueueCode.main(null);\n\nChallenge Two\n\n\n\n\n\nQueue One: [1, 4, 5, 8]\n\n\nQueue Two: [2, 3, 6, 7]\n\n\nSummative Queue: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\n\n\n\n\nChallenge 3\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Random;\n\npublic class QueueCode {\n\n    // temp1 + swaper + temp2 + swapee\n    public static Queue<Integer> swap(int swaperIndex, int swapeeIndex, Queue<Integer> q) {\n\n        if (swaperIndex > swapeeIndex) {\n            swaperIndex = swaperIndex ^ swapeeIndex ^ (swapeeIndex = swaperIndex);\n        } else if (swaperIndex == swapeeIndex) {\n            return q;\n        }\n        \n        Queue<Integer> temp1 = new LinkedList<>();\n        Queue<Integer> temp2 = new LinkedList<>();\n\n        for (int i = 0; i < swaperIndex; i++) {\n            temp1.add(q.peek());\n            q.remove();\n        }\n\n        temp2.add(q.peek());\n        q.remove();\n\n        for (int i = 1; i < (swapeeIndex - swaperIndex); i++) {\n            temp2.add(q.peek());\n            q.remove();\n        }\n\n        temp1.add(q.peek());\n        q.remove();\n\n        temp2.add(temp2.peek());\n        temp2.remove();\n\n        for (Integer i : temp2) {\n            temp1.add(i);\n        }\n\n        for (Integer i : q) {\n            temp1.add(i);\n        }\n\n        return temp1;\n    }\n\n    public static void ChallengeThree() {\n\n        Queue<Integer> q = new LinkedList<>();\n        Integer[] array = {1, 2, 3, 4, 5, 6, 7, 8};\n        \n        for (Integer i : array) {\n            q.add(i);\n        }\n\n        System.out.println(\"Challenge Three\");\n        System.out.println();\n\n        System.out.println(\"Initial: \" + q);\n        System.out.println();\n\n        Random rand = new Random();\n\n        for (int i = 0; i < 10; i++) {\n        \n            int swaper = rand.nextInt(q.size());\n            int swapee = rand.nextInt(q.size());\n            q = swap(swaper, swapee, q);\n            System.out.println(\"Iteration \" + (i + 1) + \": \" + q);\n\n        }\n\n        System.out.println();\n        System.out.println(\"Result: \" + q);\n        System.out.println();\n\n    }\n\n    public static void main(String[] args) {\n\n        ChallengeThree();\n\n    }\n}\n\nQueueCode.main(null);\n\nChallenge Three\n\n\n\n\n\nInitial: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\n\n\nIteration 1: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\nIteration 2: [1, 7, 3, 4, 5, 6, 2, 8]\n\n\nIteration 3: [1, 7, 3, 4, 5, 2, 6, 8]\n\n\nIteration 4: [1, 6, 3, 4, 5, 2, 7, 8]\n\n\nIteration 5: [8, 6, 3, 4, 5, 2, 7, 1]\n\n\nIteration 6: [8, 6, 2, 4, 5, 3, 7, 1]\n\n\nIteration 7: [8, 6, 2, 7, 5, 3, 4, 1]\n\n\nIteration 8: [8, 3, 2, 7, 5, 6, 4, 1]\n\n\nIteration 9: [8, 3, 2, 7, 5, 1, 4, 6]\n\n\nIteration 10: [8, 7, 2, 3, 5, 1, 4, 6]\n\n\n\n\n\nResult: [8, 7, 2, 3, 5, 1, 4, 6]\n\n\n\n\n\n\n\nChallenge 4\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Stack;\n\npublic class QueueCode {\n\n    public static void ChallengeFour() {\n\n        // Variable Declaration\n        Queue<Integer> queue = new LinkedList<>();\n        Stack<Integer> stack = new Stack<>();\n        Integer[] array = {1, 2, 3, 4, 5, 6, 7, 8};\n\n        for (Integer i : array) {\n            queue.add(i);\n        }\n\n        int size = queue.size();\n\n        // Boiler Prints\n        System.out.println(\"Challenge Four\");\n        System.out.println();\n        System.out.println(\"Queue Initial: \" + queue);\n\n        // Move from queue to stack\n        for (int i = 0; i < size; i++) {\n            stack.push(queue.peek());\n            queue.remove();\n        }\n\n        // Move back from stack to queue (in reverse)\n        for (int i = 0; i < size; i++) {\n            queue.add(stack.pop());\n        }\n\n        // Print result\n        System.out.println(\"Queue Inverted: \" + queue);\n        System.out.println();\n\n    }\n\n    public static void main(String[] args) {\n\n        ChallengeFour();\n    }\n}\n\nQueueCode.main(null);\n\nChallenge Four\n\n\n\n\n\nQueue Initial: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\nQueue Inverted: [8, 7, 6, 5, 4, 3, 2, 1]"
  }
]